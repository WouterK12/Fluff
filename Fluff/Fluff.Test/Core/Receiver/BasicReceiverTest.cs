using Fluff.Exceptions;
using Microsoft.Extensions.Logging;
using Moq;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using RabbitMQ.Client.Exceptions;
using System.Text;

namespace Fluff.Test.Receiver
{
    [TestClass]
    public class BasicReceiverTest
    {
        private static readonly string[] _topics = new string[] { "Fluff.Test1.*", "Fluff.Test2.*" };

        private Mock<IModel> _channelMock;
        private Mock<IFluffContext> _contextMock;
        private BasicReceiver _sut;

        private const string defaultConsumerTag = "consumerTag"; // generated by RabbitMQ in production

        [TestInitialize]
        public void TestInitialize()
        {
            _channelMock = new Mock<IModel>(MockBehavior.Strict);
            _channelMock.Setup(c => c.QueueDeclare(It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), null))
                        .Returns(It.IsAny<QueueDeclareOk>());
            _channelMock.Setup(c => c.QueueBind(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), null));
            _channelMock.Setup(c => c.BasicConsume(It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<bool>(), null, It.IsAny<EventingBasicConsumer>()))
                        .Returns(defaultConsumerTag);
            _channelMock.Setup(c => c.BasicCancel(It.IsAny<string>()));
            _channelMock.Setup(c => c.BasicPublish(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<IBasicProperties>(), It.IsAny<ReadOnlyMemory<byte>>()));
            _channelMock.Setup(c => c.BasicAck(It.IsAny<ulong>(), It.IsAny<bool>()));
            _channelMock.Setup(c => c.BasicNack(It.IsAny<ulong>(), It.IsAny<bool>(), It.IsAny<bool>()));
            _channelMock.Setup(c => c.Dispose());

            _contextMock = new Mock<IFluffContext>(MockBehavior.Strict);
            _contextMock.Setup(c => c.ExchangeName).Returns(FluffOptionsDefaults.ExchangeName);
            _contextMock.Setup(c => c.QueueName).Returns(FluffOptionsDefaults.QueueName);
            _contextMock.Setup(c => c.CreateChannel()).Returns(_channelMock.Object);
            _contextMock.Setup(c => c.Dispose());

            var loggerMock = new Mock<ILogger<BasicReceiver>>();

            _sut = new BasicReceiver(_contextMock.Object, loggerMock.Object);
        }

        [TestCleanup]
        public void TestCleanup()
        {
            _sut.Dispose();
        }

        //[TestMethod]
        //public void SetupQueue_Null_BasicReceiver_ThrowsFluffException()
        //{
        //    // Act
        //    Action act = () =>
        //    {
        //        _sut.SetupQueue(null!);
        //    };

        //    // Assert
        //    FluffException ex = Assert.ThrowsException<FluffException>(act);
        //    Assert.AreEqual(FluffExceptionMessages.NoTopics, ex.Message);
        //}

        //[TestMethod]
        //public void SetupQueue_EmptyArray_BasicReceiver_ThrowsFluffException()
        //{
        //    // Act
        //    Action act = () =>
        //    {
        //        _sut.SetupQueue(Array.Empty<string>());
        //    };

        //    // Assert
        //    FluffException ex = Assert.ThrowsException<FluffException>(act);
        //    Assert.AreEqual(FluffExceptionMessages.NoTopics, ex.Message);
        //}

        [TestMethod]
        public void SetupQueue_Twice_BasicReceiver_ThrowsFluffException()
        {
            // Act
            _sut.SetupQueue(_topics);
            Action act = () =>
            {
                _sut.SetupQueue(_topics);
            };

            // Assert
            FluffException ex = Assert.ThrowsException<FluffException>(act);
            Assert.AreEqual(FluffExceptionMessages.QueueAlreadySetup, ex.Message);
        }

        [TestMethod]
        public void SetupQueue_BasicReceiverUnreachableRabbitMQ_ThrowsBrokerUnreachableException()
        {
            // Arrange
            _contextMock.Setup(c => c.CreateChannel()).Throws(() => new BrokerUnreachableException(new Exception()));

            // Act
            Action act = () =>
            {
                _sut.SetupQueue(_topics);
            };

            // Assert
            BrokerUnreachableException ex = Assert.ThrowsException<BrokerUnreachableException>(act);
            Assert.AreEqual("None of the specified endpoints were reachable", ex.Message);
        }

        [TestMethod]
        public void SetupQueue_BasicReceiver_CallsCreateChannel()
        {
            // Act
            _sut.SetupQueue(_topics);

            // Assert
            _contextMock.Verify(c => c.CreateChannel(), Times.Once);
            _channelMock.Verify(c => c.QueueDeclare(FluffOptionsDefaults.QueueName, true, false, false, null), Times.Once);

            _channelMock.Verify(c => c.QueueBind(FluffOptionsDefaults.QueueName, FluffOptionsDefaults.ExchangeName, It.IsAny<string>(), null), Times.Exactly(_topics.Length));
            foreach (string topic in _topics)
            {
                _channelMock.Verify(c => c.QueueBind(FluffOptionsDefaults.QueueName, FluffOptionsDefaults.ExchangeName, topic, null), Times.Once);
            }
        }

        [TestMethod]
        public void StartReceiving_Received_BasicReceiver_InvokesEventMessage()
        {
            // Arrange
            IBasicConsumer callConsumer = null!;

            _channelMock.Setup(c => c.BasicConsume(It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<bool>(), null, It.IsAny<EventingBasicConsumer>()))
                        .Callback((string _, bool _, string _, bool _, bool _, IDictionary<string, object> _, IBasicConsumer consumer) =>
                        {
                            callConsumer = consumer;
                        })
                        .Returns(It.IsAny<string>());

            _sut.SetupQueue(_topics);

            EventMessage receivedEvent = null!;

            // Act
            _sut.StartReceiving((e) => receivedEvent = e);

            callConsumer?.HandleBasicDeliver(null, 0, false,
                                             exchange: FluffOptionsDefaults.ExchangeName,
                                             routingKey: _topics[0],
                                             properties: null,
                                             body: Encoding.Unicode.GetBytes("Hello world!"));

            // Assert
            Assert.AreEqual(_topics[0], receivedEvent.Topic);
            Assert.AreEqual("Hello world!", receivedEvent.Body);
        }

        [TestMethod]
        public void StartReceiving_Received_BasicConsumer_CallsBasicAck()
        {
            // Arrange
            IBasicConsumer callConsumer = null!;

            _channelMock.Setup(c => c.BasicConsume(It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<bool>(), null, It.IsAny<EventingBasicConsumer>()))
                        .Callback((string _, bool _, string _, bool _, bool _, IDictionary<string, object> _, IBasicConsumer consumer) =>
                        {
                            callConsumer = consumer;
                        })
                        .Returns(It.IsAny<string>());

            _sut.SetupQueue(_topics);

            // Act
            _sut.StartReceiving(null!);
            callConsumer?.HandleBasicDeliver(null, 0, false, null, null, null, null);

            // Assert
            _channelMock.Verify(c => c.BasicAck(It.IsAny<ulong>(), false));
        }

        [TestMethod]
        public void StartReceiving_Received_ThrowingException_BasicConsumer_CallsBasicNack()
        {
            // Arrange
            IBasicConsumer callConsumer = null!;

            _channelMock.Setup(c => c.BasicConsume(It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<bool>(), null, It.IsAny<EventingBasicConsumer>()))
                        .Callback((string _, bool _, string _, bool _, bool _, IDictionary<string, object> _, IBasicConsumer consumer) =>
                        {
                            callConsumer = consumer;
                        })
                        .Returns(It.IsAny<string>());

            _sut.SetupQueue(_topics);

            // Act
            _sut.StartReceiving((e) => throw new Exception());
            callConsumer?.HandleBasicDeliver(null, 0, false, null, null, null, null);

            // Assert
            _channelMock.Verify(c => c.BasicNack(It.IsAny<ulong>(), false, true));
        }

        [TestMethod]
        public void StartReceiving_BasicReceiver_CallsBasicConsume()
        {
            // Arrange
            _sut.SetupQueue(_topics);

            // Act
            _sut.StartReceiving((e) => { });

            // Assert
            _channelMock.Verify(c => c.BasicConsume(FluffOptionsDefaults.QueueName, false, It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<bool>(), null, It.IsAny<EventingBasicConsumer>()), Times.Once);
        }

        [TestMethod]
        public void StartReceiving_BasicReceiverNoSetupQueue_ThrowsFluffException()
        {
            // Act
            Action act = () =>
            {
                _sut.StartReceiving((e) => { });
            };

            // Assert
            FluffException ex = Assert.ThrowsException<FluffException>(act);
            Assert.AreEqual(FluffExceptionMessages.NoQueue, ex.Message);
        }

        [TestMethod]
        public void StartReceiving_Twice_BasicReceiver_ThrowsFluffException()
        {
            // Arrange
            _sut.SetupQueue(_topics);

            // Act
            _sut.StartReceiving((e) => { });
            Action act = () =>
            {
                _sut.StartReceiving((e) => { });
            };

            // Assert
            FluffException ex = Assert.ThrowsException<FluffException>(act);
            Assert.AreEqual(FluffExceptionMessages.AlreadyReceiving, ex.Message);
        }

        [TestMethod]
        public void StartReceiving_BasicReceiverUnreachableRabbitMQ_ThrowsBrokerUnreachableException()
        {
            // Arrange
            _channelMock.Setup(c => c.BasicConsume(It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<bool>(), null, It.IsAny<EventingBasicConsumer>()))
                        .Throws(() => new BrokerUnreachableException(new Exception()));
            _sut.SetupQueue(_topics);

            // Act
            Action act = () =>
            {
                _sut.StartReceiving((e) => { });
            };

            // Assert
            BrokerUnreachableException ex = Assert.ThrowsException<BrokerUnreachableException>(act);
            Assert.AreEqual("None of the specified endpoints were reachable", ex.Message);
        }

        [TestMethod]
        public void Dispose_BasicReceiver_DisposesChannelAndContext()
        {
            // Arrange
            _sut.SetupQueue(_topics);

            // Act
            _sut.Dispose();

            // Assert
            _channelMock.Verify(c => c.BasicCancel(null), Times.Once);
            _channelMock.Verify(c => c.Dispose(), Times.Once);
            _contextMock.Verify(c => c.Dispose(), Times.Once);
        }

        [TestMethod]
        public void Dispose_BasicReceiver_NoSetupQueue_DoesNotDisposeChannel()
        {
            // Act
            _sut.Dispose();

            // Assert
            _channelMock.Verify(c => c.BasicCancel(null), Times.Never);
            _channelMock.Verify(c => c.Dispose(), Times.Never);
        }
    }
}
